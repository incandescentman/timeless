# Changelog

All notable changes to Timeless calendar are documented in this file.

## [Unreleased]

### Fixed - 2025-10-15
- Resolved a mobile sync issue where changes to the diary were not appearing on iPhone. The `calendar-load` API was incorrectly including `Date.now()` in the `lastSavedTimestamp`, causing stale data to be served to clients with aggressive caching. The fix removes `Date.now()` to ensure the timestamp reflects the true file modification time.

### Added - 2025-10-15
- Test suite (`vitest`) for `calendarDiary.js` helpers to ensure robust parsing and formatting.
- Round-trip tests to guarantee data integrity between parsing and formatting.
- A `sample-diary.md` in `docs/` for format reference.

### Fixed - 2025-10-15
- Corrected a bug in `parseMarkdownDiary` where events with both a completion marker and tags were parsed incorrectly.

### Changed - 2025-10-15
- Added `vitest` as a dev dependency and a `test` script to `package.json`.

### Added - 2025-10-14
- Dropbox-backed calendar sync flow:
  - Markdown diary helpers for JSON↔Markdown conversion with embedded timestamps
  - Vite dev middleware endpoints (`/__load-calendar-diary`, `/__update-calendar-diary`) writing to the Dropbox symlink
  - Dropbox API handlers (`api/calendar-load`, `api/calendar-save`) with shared token cache
- Documentation updates covering Dropbox env vars, dev defaults, and deployment steps

### Changed - 2025-10-14
- `/api/calendar` now delegates to the Dropbox handlers; removed Redis dependency (`ioredis`)
- `src/utils/storage` defaults dev sync/load endpoints to the middleware and respects the new env overrides
- Verified production flow: web captures write through to `data/jay-diary.md` in Dropbox. Manual edits now piggyback on Dropbox `server_modified` timestamps (no manual comment bump); next test is remote edit → auto pull in browser.
- Added focus/visibility listeners and 60s polling so browser notices remote diary edits shortly after they land.
- Remote edits now rely on Dropbox `server_modified`; browser fetches them within ~60s or on focus.
- Archived legacy assets/docs; moved historical images into docs/assets and roadmap into docs/archive.
- Next session: add Vitest round-trip tests for calendarDiary helpers, decide on long-term handling of `data/`, and double-check archived docs for broken references.
### Added - 2025-10-04
- Local iOS app icon and favicon generated from timeless-etched.png
  - 180x180 apple-touch-icon.png for iOS home screen
  - 32x32 favicon.png for browser tabs
  - Replaced remote icon URLs with local /public assets
- Enhanced terminator HUD now default (promoted from experimental mode)
  - Corner brackets with cyan accents at all 8 corners
  - Chromatic aberration on title text (RGB split effect)
  - Edge glow pulse animation sweeping across HUD
  - Animated data stream background with scrolling hex codes
  - Static/noise texture overlay for CRT monitor effect
  - Hexagonal accent shapes on meta and telemetry sections
  - Real-time data: current date, time, and today's event count
- ESC key immediately dismisses command HUD
- Bottom sheet composer for mobile (swipe-to-dismiss)
- Touch ripple effects on mobile day cells (Material Design style)
- Loading skeleton UI with shimmer animation
- Smooth scrolling with momentum on mobile

### Changed - 2025-10-04
- Larger touch targets on mobile (220px minimum height for day cells)
- Removed gaps between days within week rows on mobile (flush layout)
- HUD hidden on mobile for optimal mobile UX
- All animations optimized to use only transform/opacity for 60fps
- Reduced shadow complexity on mobile for better performance

### Fixed - 2025-10-04
- CRITICAL: Mobile crash caused by rendering hundreds of BottomSheet portals
  - Changed to only render BottomSheet when isAddingNew is true on mobile
  - Reduced from 100+ portal instances to 0-1 at any time
- Vim navigation keys (h/j/k/l) no longer hijack browser shortcuts (Cmd+L now works)
  - Added modifier key checks (!e.metaKey && !e.ctrlKey)

### Added - 2025-10-02
- Integrated experimental-mode package for UI variant testing
- Added ExperimentalModeWrapper component for testing design variants
- Configured to use published `@jaydixit/experimental-mode@^1.0.0` from npm

### Fixed - 2025-10-02
- Fixed import path for `parseInstructionString` from `@jaydixit/experimental-mode` (not `/components`)
- Removed duplicate keyboard handler for Option-X (package handles it automatically)
- Fixed CSS specificity issues with global button styles overriding experimental-mode navigation
- Increased z-index to 9999 for variant switcher visibility

### Notes
- Experimental mode only activates with `?experimental=true` URL parameter
- Should be removed before final production deployment
