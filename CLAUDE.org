#+TITLE: CLAUDE.org - Documentation Map for Timeless
#+DATE: 2025-10-04
#+DESCRIPTION: Entry point and navigation for all Timeless documentation

#+BEGIN_COMMENT
LLM_CONTEXT:
- Purpose: Entry point and map for all documentation
- Key Docs: All .org files in /docs
- Always read before: Starting any major change or onboarding
- Also includes: "For AI Assistants" section with navigation and key invariants
Last Synced for AI Context: 2025-10-04
#+END_COMMENT


* CRITICAL: Debugging Protocol
- If debugging takes more than 2 turns, STOP and re-read ~docs/codebase-wisdom.org~ to avoid running in circles
- Common patterns and fixes are documented there from past debugging sessions
- Check symptoms against documented issues BEFORE attempting multiple fixes

* All Documentation Files

** Core Documentation
- [[file:CLAUDE.org][CLAUDE.org]] (this file) - Documentation map and starting point
- [[file:concept-map.org][concept-map.org]] - Glossary of project-specific terminology
- [[file:the-timeless-approach.org][the-timeless-approach.org]] - Philosophy and core concepts
- [[file:design-architecture.org][design-architecture.org]] - Technical architecture with mental models
- [[file:visual-design-philosophy.org][visual-design-philosophy.org]] - Design system and principles

** Development Documentation
- [[file:codebase-wisdom.org][codebase-wisdom.org]] - Hard-won debugging insights
- [[file:work-log.org][work-log.org]] - Session-based work tracking
- [[file:critical-next-steps.org][critical-next-steps.org]] - Technical debt and roadmap
- [[file:decisions/][decisions/]] - Architecture Decision Records (ADRs)

** Experimental & Archive
- [[file:experimental-mode-plan.org][experimental-mode-plan.org]] - Experimental features planning
- [[file:experimental-mode-feedback.org][experimental-mode-feedback.org]] - Experimental features feedback
- [[file:archive/][archive/]] - Historical documentation

* Pre-Session Ritual (DO NOT SKIP)

Every coding session MUST start with:
1. Read last entry in [[file:work-log.org::*Session Handoff][work-log.org::*Session Handoff]]
2. Review "For AI Assistants" section below for navigation guidance
3. Check [[file:codebase-wisdom.org][codebase-wisdom.org]] for relevant gotchas

Skipping this ritual leads to:
- Regenerating existing code
- Missing critical warnings
- Breaking established patterns
- Wasting time on preventable bugs

* For Contributors

** How to Update Documentation
- Work-in-progress notes → [[file:drafts/][/docs/drafts/]]
- Mature content → promote to /docs/
- After debugging → add to [[file:codebase-wisdom.org][codebase-wisdom.org]]
- After major decisions → create ADR in [[file:decisions/][/docs/decisions/]]

** When to Document
Ask in every retro: "What did we just learn that future developers will need?"

** Documentation Health Checklist
- [ ] Weekly: Verify all ADR links are valid and up-to-date
- [ ] Weekly: Update codebase-wisdom.org with new debugging insights
- [ ] Weekly: Prune /docs/drafts/ of stale or unpromoted notes
- [ ] Weekly: Check for out-of-date navigation links and cross-refs
- [ ] Weekly: Review "Recent Updates" section for accuracy

*Tip:* AI assistants should continue to the "For AI Assistants" section below for navigation and invariants.

* For AI Assistants
[[*Start Here][↑ Back to Start Here Section]]

A dedicated section for language models and AI coding assistants to understand the documentation layout, navigate relevant files, and maintain context continuity.

** Overview for AI Assistants
This repo uses the following documentation structure:
- [[file:design-architecture.org][design-architecture.org]] → system-level technical overview
- [[file:codebase-wisdom.org][codebase-wisdom.org]] → debugging lessons and traps
- [[file:visual-design-philosophy.org][visual-design-philosophy.org]] → design system and UI rules
- [[file:concept-map.org][concept-map.org]] → project-specific terminology
- [[file:work-log.org][work-log.org]] → session tracking and handoffs

** Before Making Code Changes
1. Always consult [[file:design-architecture.org][design-architecture.org]] first
2. Check [[file:codebase-wisdom.org][codebase-wisdom.org]] for known gotchas related to your task
3. Reference [[file:concept-map.org][concept-map.org]] for internal terminology
4. Review [[file:visual-design-philosophy.org][visual-design-philosophy.org]] for any UI work

** Core Modules
- ~/src/App.tsx~ - Main application component with event state management
- ~/src/components/Calendar.tsx~ - Main calendar grid component (12-month year view)
- ~/src/components/EventCard.tsx~ - Individual event display
- ~/src/components/EventForm.tsx~ - Event creation/editing form
- ~/src/types/index.ts~ - TypeScript type definitions (Event interface)
- ~/src/utils/dateUtils.ts~ - Date handling utilities

** Key Invariants
- Event data structure must remain backward-compatible
- All state changes must be immutable (React best practices)
- Events stored in array, keyed by date string (YYYY-MM-DD format)
- No external state management library - use React useState
- Today's cell always visually emphasized in red (#ef4444)
- No animations or transitions (timeless design principle)
- All dates use ISO format (YYYY-MM-DD)
- Calendar always shows full year grid (12 months)
- All documentation must remain link-consistent (no dangling references)

** Common LLM Anti-Patterns in This Codebase

*** Pattern: Breaking Today Cell Highlighting
- Problem: LLM modifies cell styling without preserving isToday logic
- Fix: Always check Calendar.tsx for existing today highlighting before changing styles
- Prevention: Load [[file:visual-design-philosophy.org][visual-design-philosophy.org]] before UI changes
- Frequency: High

*** Pattern: Adding Animations
- Problem: LLM adds CSS transitions or animations
- Fix: Remove all transitions - violates timeless design principle
- Prevention: Check design philosophy doc first
- Frequency: Medium

*** Pattern: Changing Event Data Structure
- Problem: LLM modifies event interface without considering backward compatibility
- Fix: Always maintain existing fields, only add new optional fields
- Prevention: Check [[file:design-architecture.org::*Data Structure][design-architecture.org::*Data Structure]]
- Frequency: Medium

*** Pattern: Partial Context Submissions
- Problem: LLM submits code or documentation changes without loading the full relevant context
- Fix: Always load the *entire* file and related sections (design-architecture.org, codebase-wisdom.org, ADRs) before submitting changes
- Prevention: Follow pre-session ritual; enforce context-loading checklist
- Frequency: Common in multi-file or cross-cutting changes

** Quick Reference

*** To add a new event field:
1. Update ~/src/types/index.ts~ Event interface (make it optional!)
2. Update EventForm component
3. Update EventCard display
4. Test with existing events (backward compatibility)

*** To modify calendar layout:
1. Check [[file:design-architecture.org][design-architecture.org]] for grid structure
2. Review [[file:visual-design-philosophy.org][visual-design-philosophy.org]] for constraints
3. Preserve today cell highlighting logic
4. Test across different months

*** To fix a bug:
1. Search [[file:codebase-wisdom.org][codebase-wisdom.org]] for similar issues
2. Check if it's a known anti-pattern
3. Document the fix in codebase-wisdom.org
4. Update work-log.org with LLM session summary

* Project Quick Facts

- **What**: A minimalist calendar for people who think in years, not days
- **Tech Stack**: React, TypeScript, Tailwind CSS
- **Architecture**: Single-page app with local state management
- **Design Philosophy**: Minimal, focused, timeless aesthetic

---
[[file:the-timeless-approach.org][→ Philosophy]] | [[file:design-architecture.org][→ Architecture]] | [[file:codebase-wisdom.org][→ Wisdom]]

Last Updated: 2025-10-04
