#+TITLE: Dropbox-Backed Calendar Sync Plan
#+CREATED: <2024-10-01 Tue>
#+UPDATED: <2024-10-14 Mon>

* Context
The production Timeless calendar persists shared state to Redis via =api/calendar.js=, while the browser keeps an offline copy in =localStorage=. We want parity with Canonical's minimalist capture flow by storing the shared Markdown diary in a Dropbox-synced file. The diary must stay writable in local dev, and Vercel deployments must read/write it via Dropbox's content API without changing the client-side experience.

* Goals
- Replace Redis as the canonical data store without regressing multi-device sync or undo behaviour.
- Keep the browser experience identical (still use =localStorage= for optimistic edits and offline resilience).
- Allow localhost development to edit the Dropbox-backed diary via a simple middleware, avoiding hosted APIs.
- Maintain timestamp-based conflict resolution with explicit metadata in the file for debugging.

* Proposed Architecture
** Data File (Markdown Diary)
- Canonical location: =/Users/jay/Dropbox/github/timeless/jay-diary.md= (produced by “Export Markdown Diary”).
- Repo alias: symlink =data/jay-diary.md= → Dropbox path so the Vite dev server can read/write it directly.
- Format: headings generated by =exportAsMarkdownDiary()= (=# YYYY=, =## Month YYYY=, =M/D/YYYY=, indented bullets with optional =[✓]= and hashtags). Reuse the existing serializer to avoid drift.
- Timestamp metadata: prepend =<!-- lastSavedTimestamp: 1727822222000 -->= so conflict detection never relies on filesystem metadata. Parser must read and round-trip this comment (default to 0 when absent). Reserve additional comment keys (e.g. =schema-version=) for future migrations.

** Local Development Writes
- Keep the client ↔ server payload JSON identical to today (calendar object keyed by =month_day_year= plus =lastSavedTimestamp=).
- Add Vite middleware endpoints:
  - =/__load-calendar-diary=: read Markdown, parse to JSON, return ={ calendarData, lastSavedTimestamp }=.
  - =/__update-calendar-diary=: accept JSON payload, validate timestamp ordering, convert to Markdown, write via =fs.writeFile=. Respond with the timestamp used.
- Default =VITE_CALENDAR_LOAD_ENDPOINT= / =VITE_CALENDAR_SYNC_ENDPOINT= to those middleware routes so dev builds work without extra env tweaks.
- Emit concise console logging (path + timestamp) and send 4xx/5xx errors when validation fails.

** Production Writes (Vercel)
- Replace Redis handlers with Dropbox-backed =api/calendar-load.ts= and =api/calendar-save.ts=. Both maintain the JSON contract that the client already uses.
- Save handler: convert JSON → Markdown, inject/update timestamp comment, upload via Dropbox =files/upload= with mode overwrite.
- Load handler: download Markdown via Dropbox =files/download=, parse back to JSON + timestamp, respond accordingly.
- Token management: reuse Canonical’s refresh-token helper (support =DROPBOX_ACCESS_TOKEN= override; primary envs are =DROPBOX_APP_KEY=, =DROPBOX_APP_SECRET=, =DROPBOX_REFRESH_TOKEN=). Cache tokens in memory to limit refresh calls.
- Additional env: =DROPBOX_CALENDAR_PATH= (default =/Apps/Timeless/calendar/jay-diary.md=), along with =VITE_CALENDAR_SYNC_ENDPOINT= / =VITE_CALENDAR_LOAD_ENDPOINT= pointing at =/api/calendar=.

** Client Configuration Changes
- Extract shared helpers into =src/utils/calendarDiary.ts= with:
  - =formatCalendarAsMarkdown(calendarData, timestamp)= → Markdown string (deterministic ordering, metadata comment, trailing newline).
  - =parseMarkdownDiary(rawMarkdown)= → ={ calendarData, lastSavedTimestamp }= (support hashtags with dashes/underscores, tolerate blank lines, ignore unknown HTML comments, gracefully handle missing sections).
- Update =src/utils/storage.js= to honour =VITE_CALENDAR_*_ENDPOINT= fallbacks (default to current Redis route only when unset) and to call the new helpers when converting payloads in dev mode.
- After each successful Dropbox save, rehydrate via the load endpoint (mirroring Canonical’s =ensureRemoteHydration()=) so UI reflects canonical ordering and metadata.
- Ensure undo stack and optimistic edits survive hydration by reconciling on a per-day basis rather than wholesale replacement.

* Implementation Plan
** Preparation
- [ ] Create =data/jay-diary.md= symlink pointing at Dropbox canonical file.
- [ ] Export current Redis snapshot, convert to Markdown via =exportAsMarkdownDiary()=, seed the Dropbox file, and verify manually.
- [x] Document Dropbox env vars + Markdown format expectations in =README.org= / deployment runbook.

** Shared Helpers & Tests
- [x] Implement =formatCalendarAsMarkdown= and =parseMarkdownDiary= in =src/utils/calendarDiary.ts=.
- [ ] Cover edge cases (hashtags with dashes, unchecked items, blank sections, missing timestamp).
- [ ] Add Vitest suite that round-trips representative JSON ↔ Markdown snippets (including existing =jay-diary.md= sample lines).

** Local Dev Middleware
- [x] Add middleware in =vite.config.js= for load/save routes using the shared helpers (JSON in ⇄ Markdown out).
- [x] Default dev env vars so saves/loads point at middleware automatically.
- [x] Ensure middleware validates payloads, logs concise messages, and mirrors Canonical’s error handling.

** Client Refactor
- [x] Extend =src/utils/storage.js= to use custom endpoints, rely on shared helpers, preserve timestamp conflict logic, and keep undo stack intact.
- [ ] Introduce optional dev bootstrap via =import.meta.glob('/data/jay-diary.md', { as: 'raw' })= when the symlink exists.

** Serverless Dropbox Bridge
- [x] Add =lib/dropbox.ts= with cached token refresh helper (ported from Canonical).
- [x] Implement =api/calendar-load.ts= and =api/calendar-save.ts= that reuse shared helpers.
- [x] Update =api/calendar.js= so =/api/calendar= GET/POST route delegates to the new handlers.
- [x] Remove Redis dependency (=ioredis=) and related env var docs once Dropbox flow is proven stable.

** QA & Cutover
- [ ] Run dev smoke tests with multiple tabs/devices to verify timestamp ordering and undo stack survival.
- [ ] Deploy preview build hitting Dropbox sandbox; verify manual edits in Dropbox propagate back.
- [ ] Monitor Dropbox API response codes, add logging around token refresh to catch edge cases.
- [ ] After stable window, remove Redis env references and archive legacy handler.

* Open Questions
- Keep Redis handler behind a feature flag for emergency rollback?
- Do we want to surface Dropbox revision IDs in the UI for audit/debug?
- Should mobile clients get a dedicated read-only endpoint that streams Markdown for faster loading?
