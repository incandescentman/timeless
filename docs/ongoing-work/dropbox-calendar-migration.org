#+TITLE: Dropbox-Backed Calendar Sync Plan
#+CREATED: <2024-10-01 Tue>
#+UPDATED: <2024-10-14 Mon>

* Context
The production Timeless calendar now persists shared state to a Dropbox-backed Markdown diary via `/api/calendar`, while the browser keeps an offline copy in LocalStorage. The goal is parity with Canonical's minimalist capture flow: the diary remains the single source of truth, editable in local dev, with production writes/reads handled through Dropbox.

* Goals
- Replace Redis as the canonical data store without regressing multi-device sync or undo behaviour.
- Keep the browser experience identical (still use =localStorage= for optimistic edits and offline resilience).
- Allow localhost development to edit the Dropbox-backed diary via a simple middleware, avoiding hosted APIs.
- Maintain timestamp-based conflict resolution with explicit metadata in the file for debugging.

* Proposed Architecture
** Data File (Markdown Diary)
- Canonical location: =/Users/jay/Dropbox/github/timeless/jay-diary.md= (produced by “Export Markdown Diary”).
- Repo alias: symlink =data/jay-diary.md= → Dropbox path so the Vite dev server can read/write it directly.
- Format: headings generated by =exportAsMarkdownDiary()= (=# YYYY=, =## Month YYYY=, =M/D/YYYY=, indented bullets with optional =[✓]= and hashtags). Reuse the existing serializer to avoid drift.
- Timestamp metadata: prepend =<!-- lastSavedTimestamp: 1727822222000 -->= so conflict detection never relies on filesystem metadata. Parser must read and round-trip this comment (default to 0 when absent). Reserve additional comment keys (e.g. =schema-version=) for future migrations.

** Local Development Writes
- Keep the client ↔ server payload JSON identical to today (calendar object keyed by =month_day_year= plus =lastSavedTimestamp=).
- Add Vite middleware endpoints:
  - =/__load-calendar-diary=: read Markdown, parse to JSON, return ={ calendarData, lastSavedTimestamp }=.
  - =/__update-calendar-diary=: accept JSON payload, validate timestamp ordering, convert to Markdown, write via =fs.writeFile=. Respond with the timestamp used.
- Default =VITE_CALENDAR_LOAD_ENDPOINT= / =VITE_CALENDAR_SYNC_ENDPOINT= to those middleware routes so dev builds work without extra env tweaks.
- Emit concise console logging (path + timestamp) and send 4xx/5xx errors when validation fails.

** Production Writes (Vercel)
- Replace Redis handlers with Dropbox-backed =api/calendar-load.ts= and =api/calendar-save.ts=. Both maintain the JSON contract that the client already uses.
- Save handler: convert JSON → Markdown, inject/update timestamp comment, upload via Dropbox =files/upload= with mode overwrite.
- Load handler: download Markdown via Dropbox =files/download=, parse back to JSON + timestamp, respond accordingly.
- Token management: reuse Canonical’s refresh-token helper (support =DROPBOX_ACCESS_TOKEN= override; primary envs are =DROPBOX_APP_KEY=, =DROPBOX_APP_SECRET=, =DROPBOX_REFRESH_TOKEN=). Cache tokens in memory to limit refresh calls.
- Additional env: =DROPBOX_CALENDAR_PATH= (default =/Apps/Timeless/calendar/jay-diary.md=), along with =VITE_CALENDAR_SYNC_ENDPOINT= / =VITE_CALENDAR_LOAD_ENDPOINT= pointing at =/api/calendar=.

** Client Configuration Changes
- Extract shared helpers into =src/utils/calendarDiary.ts= with:
  - =formatCalendarAsMarkdown(calendarData, timestamp)= → Markdown string (deterministic ordering, metadata comment, trailing newline).
  - =parseMarkdownDiary(rawMarkdown)= → ={ calendarData, lastSavedTimestamp }= (support hashtags with dashes/underscores, tolerate blank lines, ignore unknown HTML comments, gracefully handle missing sections).
- Update =src/utils/storage.js= to honour =VITE_CALENDAR_*_ENDPOINT= fallbacks (default to current Redis route only when unset) and to call the new helpers when converting payloads in dev mode.
- After each successful Dropbox save, rehydrate via the load endpoint (mirroring Canonical’s =ensureRemoteHydration()=) so UI reflects canonical ordering and metadata.
- Ensure undo stack and optimistic edits survive hydration by reconciling on a per-day basis rather than wholesale replacement.

* Implementation Plan
** Preparation
- [x] Ensure =data/jay-diary.md= points at the Dropbox-backed diary (repo now lives in Dropbox; no extra symlink required).
- [ ] Export current Redis snapshot, convert to Markdown via =exportAsMarkdownDiary()=, seed the Dropbox file, and verify manually.
- [x] Document Dropbox env vars + Markdown format expectations in =README.org= / deployment runbook.

** Shared Helpers & Tests
- [x] Implemented =formatCalendarAsMarkdown= and =parseMarkdownDiary= in =src/utils/calendarDiary.js= (timestamp comment, dashed hashtags, whitespace handling).
- [ ] Add Vitest suite that round-trips representative JSON ↔ Markdown snippets (including existing =jay-diary.md= sample lines). *Still todo.*

** Local Dev Middleware
- [x] Added =/__load-calendar-diary= and =/__update-calendar-diary= middleware using shared helpers (JSON ⇄ Markdown).
- [x] Dev env defaults point at middleware; logging makes saves/loads visible in console.

** Client Refactor
- [x] Storage module honours =VITE_CALENDAR_*_ENDPOINT= (defaults to `/api/calendar`) and uses shared helpers.
- [x] Dropbox metadata (server_modified) drives conflict resolution; undo stack preserved; focus/visibility listeners + 60s polling keep clients fresh.
- [ ] Optional dev bootstrap via =import.meta.glob('/data/jay-diary.md', { as: 'raw' })= (consider later).

** Serverless Dropbox Bridge
- [x] Added =lib/dropbox.js= token helper (refresh-token flow + cache).
- [x] Implemented =api/calendar-load.js= and =api/calendar-save.js= using metadata timestamps.
- [x] =api/calendar.js= now delegates GET/POST to Dropbox handlers.
- [x] Removed Redis dependency (=ioredis=) and related docs.

** QA & Cutover
- [x] Dev + prod verified: multi-tab sync, Dropbox writes from web confirmed.
- [x] Manual diary edits propagate automatically (Dropbox metadata + client polling).
- [x] Logging captures token refresh failures; no Redis env references remain.

* Current Status
- Web UI save path writes directly to `data/jay-diary.md` in Dropbox (verified prod).
- Manual edits in the diary file hydrate in under a minute or immediately on tab focus via metadata-aware sync.
- 60s polling + focus/visibility triggers keep clients fresh without manual refresh.
- Dropbox auth handled via refresh-token flow; error payloads bubble through API responses.
- Docs and work log updated with env setup + behaviour notes.


* Open Questions
- Add automated tests for diary parsing/formatting (Vitest todo above).
- Consider Dropbox long-poll/webhook integration if we ever need near-instant updates.
- Optional dev bootstrap via `import.meta.glob` (see TODO) if startup perf becomes an issue.
- Surface Dropbox revision metadata in UI or logs for audit/debug?
